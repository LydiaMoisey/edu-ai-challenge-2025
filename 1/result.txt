Let's break down the requirements and analyze the most suitable database type step by step using Chain-of-Thought reasoning:

### 1. **Nature of the Data**
   - **Profiles, Posts, and Connections**: These are typically structured or semi-structured data (e.g., user profiles have fixed fields like name, age, etc., while posts may have variable content). Connections between users (follower/following relationships) are graph-like structures.
   - **Implication**: The database should handle structured/semi-structured data well, and ideally support graph-like relationships natively or efficiently.

### 2. **Scale and Performance**
   - **Millions of users**: The database must handle large volumes of data and high throughput.
   - **High read speed (80% reads)**: The database should optimize for read performance, possibly through caching, indexing, or read replicas.
   - **20% writes**: Write performance is still important but not as critical as reads.

### 3. **Scalability**
   - The database must scale horizontally (adding more servers) to accommodate growth, as vertical scaling (upgrading a single server) has limits.

### 4. **Query Patterns**
   - **Profiles**: Likely queried by user ID or username (key-value or document lookup).
   - **Posts**: Need to fetch posts by user ID (user's posts), by timestamp (feed), or by popularity (trending). May involve complex queries (e.g., posts from followed users).
   - **Connections**: Graph traversals (e.g., "friends of friends") or list lookups (e.g., followers list).

### 5. **Consistency vs. Availability**
   - For a social platform, availability and partition tolerance (CAP theorem) are often prioritized over strong consistency. Eventual consistency is usually acceptable (e.g., a post taking a few seconds to appear everywhere is fine).

### Evaluating Database Types:
1. **Relational (SQL) Databases (e.g., PostgreSQL, MySQL)**:
   - Pros: Strong consistency, ACID transactions, good for structured data.
   - Cons: Scaling horizontally is challenging. Graph-like queries (e.g., friends of friends) are inefficient (require joins or recursive queries). Not ideal for high read scalability.

2. **Document Databases (e.g., MongoDB, CouchDB)**:
   - Pros: Good for semi-structured data (profiles, posts), scales horizontally, flexible schema.
   - Cons: Handling connections (graph data) is awkward (manual referencing or embedding). Complex queries on connections are inefficient.

3. **Graph Databases (e.g., Neo4j, ArangoDB)**:
   - Pros: Excellent for connections (e.g., friend relationships, recommendations). Efficient graph traversals.
   - Cons: Less optimal for high-volume reads of non-graph data (e.g., fetching posts). Scaling can be challenging for some graph DBs.

4. **Key-Value Stores (e.g., Redis, DynamoDB)**:
   - Pros: Blazing-fast reads/writes, scales well.
   - Cons: Limited query capabilities. Not ideal for complex data relationships.

5. **Wide-Column Stores (e.g., Cassandra, ScyllaDB)**:
   - Pros: High scalability, good for write-heavy workloads, tunable consistency.
   - Cons: Less ideal for complex queries or graph traversals.

6. **Hybrid Approach**:
   - Use a **document database** (e.g., MongoDB) for profiles and posts (optimized for reads and flexible schema).
   - Use a **graph database** (e.g., Neo4j) for connections/friend relationships.
   - Add a **caching layer** (e.g., Redis) for frequently accessed data (e.g., popular posts, user sessions).

### Final Recommendation:
Given the trade-offs, a **hybrid approach** is likely the best:
1. **Primary Database**: **Document database (e.g., MongoDB)** for profiles and posts. 
   - Reasons: 
     - Scales well horizontally.
     - Flexible schema (posts can vary in structure).
     - Optimized for read-heavy workloads (80% reads).
     - Supports indexing for fast queries (e.g., posts by user ID or timestamp).
2. **Secondary Database**: **Graph database (e.g., Neo4j or ArangoDB)** for connections.
   - Reasons:
     - Efficiently handles friend/follower relationships and graph traversals (e.g., "friends of friends").
3. **Caching Layer**: **Redis** for frequently accessed data (e.g., feed pre-computations, session data).
   - Reasons:
     - Further improves read speed for hot data.

### Why Not Pure Graph or Relational?
- Pure graph databases struggle with non-graph data at scale (e.g., storing millions of posts).
- Relational databases don't scale horizontally easily and are inefficient for graph-like queries.

### Additional Considerations:
- For the feed generation (e.g., showing posts from followed users), consider a **materialized view** or **pre-computed feed** stored in MongoDB or Redis.
- Use **read replicas** in MongoDB to distribute read load.
- For analytics (e.g., trending posts), consider a data warehouse (e.g., Amazon Redshift) or OLAP database.